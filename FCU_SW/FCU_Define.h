#define IP_ADDRESS _T("192.168.100.250")
#define PORT 50999

#define CONNECTION_IP _T("192.168.100.20")
#define CONNECTION_PORT 50203

#define CONNECTION_COMMAND 1001
#define DISCONNECTION_COMMAND 1002
#define CONNECT_AND_DISCONNECT 1003
#define LOCAL_IP _T("192.168.0.30")
// #define LOCAL_IP _T("192.168.100.210")
#define LOCAL_PORT (UINT)51999

#define FCU_SWDLG_INIT 2000

#define MESSAGE_SIZE_MAX 1024

#define ATK_MODE_DIRECT 1
#define ATK_MODE_UPPER 0

#define SET_FOCUS 1200

#define ENABLE (WORD)0x0001
#define DISABLE (WORD)0x0000
// Ελ½Ε
#define WM_CONNECT_EVENT   (WM_USER+25001)
#define WM_RECEIVE_EVENT  (WM_USER+25002)
#define WM_RECEIVE_EVENT_HILS (WM_USER+25003)
#define WM_CLOSE_EVENT (WM_USER+25004)
#define TRY_CONNECT_TO_SERVER   (WM_USER+26001)
#define FCU_AUTO_START (WM_USER+26002)

#define WM_MSL_BIT_CHK (WM_USER+27001)
#define WM_SKR_RDY_CHK (WM_USER+27002)
#define WM_SKR_CAGE_CMD (WM_USER+27003)
#define WM_SKR_TRK_STATUS (WM_USER+27004)
#define WM_SKR_PLC_CHK (WM_USER+27005)
#define WM_MSL_STS_CHK (WM_USER+27006)
#define WM_MSL_ID_CHK (WM_USER+27007)
#define WM_ATK_MOD (WM_USER+27008)
#define WM_LCK_CMD (WM_USER+27009)
#define WM_RELCK_CMD (WM_USER+27010)
#define WM_LIFTOFF_RDY (WM_USER+27011)
#define WM_MSL_CON (WM_USER+27012)
#define WM_PIN_CHK (WM_USER+27013)
#define WM_SQB_MBAT (WM_USER+27014)
#define WM_SQB_CU (WM_USER+27015)
#define WM_SQB_PIN (WM_USER+27016)
#define WM_PINCHK_MSLCON (WM_USER+27017)
#define WM_SQB_BAT (WM_USER+27018)

#define WM_SELECT_MODE (WM_USER+27018)
#define WM_OPEN_MSL_BIT_CHK (WM_USER+28001)

#define WM_SET_LAUNCH_MODE (WM_USER+29001)
#define WM_SET_DRYRUN_MODE (WM_USER+29002)

#define WM_CLIENT_DISCONNECT (WM_USER+27101)
#define WM_RESET_STAT (WM_USER+27100)

#define CASE_RESET_LED 0x0500

#define CASE_MSL_STAT_CHANGE 0x900
#define CASE_SKR_STAT_CHANGE 0x901
#define CASE_SET_MAX_SKR_RDY_TIME 0x902
#define CASE_SET_MAX_MSL_BIT_TIME 0x903
#define CASE_SET_MAX_SKR_PLC_TIME 0x904
#define CASE_SET_MAX_MSL_STS_TIME 0x905
#define CASE_GSTREAMER 0x906
#define CASE_EXT_POW_OFF 0x907
#define CASE_SET_MAX_ATK_MOD_TIME 0x908
#define CASE_SET_MAX_LIFTOFF_RDY_TIME 0x909
#define CASE_SET_MAX_PINSQB_TIME 0x910
#define CASE_SET_MAX_EMSQUIB_TIME 0x911
#define CASE_SET_MAX_SKR_CAGE_TIME 0x912

#define CASE_RECV_CAM 0x1000
#define CASE_EXT_POW_ON 0x7000
#define CASE_MSL_BIT_CHK 0x0100
#define CASE_SKR_CAGE_CMD    0x0200
#define CASE_MSL_ID_CHK  0x0300
#define CASE_SKR_RDY_CHK 0x0400
#define CASE_SKR_PLC_CHK 0x1400
#define CASE_LOCK_ON_CMD 0x0500
#define CASE_RE_LOCK_ON_CMD 0x1500
#define CASE_SKR_TRK_STATUS 0x0600

#define CASE_ATK_MODE_CMD 0x3700
#define CASE_BATSQ 0x4000
#define CASE_MBAT_ON 0x4100
#define CASE_ABAT_ON 0x4200
#define CASE_MSL_STS_CHK 0x3800
#define CASE_LIFTOFF_RDY_CMD 0x3F00
#define CASE_PINSQ 0x4300
#define CASE_EMSQ 0x4400
#define CASE_CUSQ 0x4500

#define CASE_DRYRUN_MODE 0
#define CASE_LAUNCH_MODE 1
#define CASE_TEST_MODE 2
#define CASE_INITIAL_MODE 3
#define CASE_BEFORE_FIRE 0
#define CASE_AFTER_FIRE 1

#define CASE_KEY_UPPER 1001
#define CASE_KEY_RIGHT 1002
#define CASE_KEY_LEFT 1003
#define CASE_KEY_BOTTOM 1004
#define CASE_KEY_CENTER 1007
#define CASE_KEY_ATK_MODE 1005
#define CASE_KEY_MSL_POW 1006

#define CASE_FCU_BIT_CHK 0x6200
#define CASE_EXT_POW_CHK 0x5010
#define CASE_ABAT_POW_CHK 0x5020
#define CASE_MBAT_POW_CHK 0x5030
#define CASE_MSLCON_CHK 0x6000
#define CASE_PINCHK_CHK 0x6010
#define CASE_PINCHK_MSLCON 0x9900

#define CASE_DISC_TEST_MODE_SET 0x6100


#define MONO 100
#define WHITE 101
#define YELLOW 102
#define GREEN 103
#define RED 104
#define BLACK 105

#define HIGH 110
#define MID 111
#define LOW 112

#define CAM 1000
// for CRC-16(XMODEM)
#define VAL_POLY 0x1021

#define FS20 20
#define FS40 40
#define LSB_1 1
#define LSB_100 100

#define SCL_RED Scalar(0, 0, 255)
#define SCL_GREEN Scalar(0, 255, 0)
#define SCL_YELLOW Scalar(0, 255, 255)
#define SCL_WHITE Scalar(255, 255, 255)

#define AXIS_X 10
#define AXIS_Y 20

#define CONVERT_TO_SKR_COORDINATE 101
#define CONVERT_TO_DP_COORDINATE 102

typedef unsigned char   BOOLEAN;
typedef char    CHAR;

typedef signed char S8BIT;
typedef unsigned char   U8BIT;

typedef signed short    S16BIT;
typedef unsigned short  U16BIT;

typedef signed int  S32BIT;
typedef unsigned int    U32BIT;

typedef signed long long    S64BIT;

typedef unsigned char       BYTE;
typedef unsigned short      WORD;

typedef union _uCommandType
{
	BYTE bCommand[1024];
	WORD wCommand[512];
} uCommandType;

typedef struct _sEXT_POW_ON
{
	WORD NO_OF_DATA;
	WORD CTRL_WORD;
	WORD EXT_POW_RSLT;
} sEXT_POW_ON;

typedef union _uEXT_POW_ON
{
	sEXT_POW_ON sEXT_POW_ON;
	BYTE bEXT_POW_ON[6];
	WORD wEXT_POW_ON[3];
} uEXT_POW_ON;


typedef struct _sMSL_BIT1
{
	WORD Reserved : 13;
	WORD GCU_BIT : 1;
	WORD SKR_BIT : 1;
	WORD ACT_BIT : 1;
} sMSL_BIT1;

typedef struct _sMSL_BIT2
{
	WORD Reserved1 : 7;
	WORD MBAT : 1;
	WORD Reserved2 : 6;
	WORD FUZGOOD : 1;
	WORD MSLAWY : 1;
} sMSL_BIT2;

typedef struct _sGCU_BIT
{
	WORD GCU_BIT_RESULT : 1;
	WORD Reserved : 1;
	WORD FPGA : 1;
	WORD GCU : 1;
	WORD SPI : 1;
	WORD FLASH : 1;
	WORD SRAM : 1;
	WORD ADC : 1;
	WORD UART : 1;
	WORD CAN : 1;
	WORD PWR_30P : 1;
	WORD PWR_15P : 1;
	WORD PWR_15N : 1;
	WORD PWR_5P : 1;
	WORD PWR_3_3P : 1;
	WORD PWR_1_2P : 1;
} sGCU_BIT;

typedef struct _sMBAT
{
	WORD MBAT : 15;
	WORD SignBIT : 1;
} sMBAT;

typedef struct _sPWR_30P
{
	WORD PWR_30P : 15;
	WORD SignBIT : 1;
} sPWR_30P;

typedef struct _sPWR_15P
{
	//WORD SignBIT : 1;
	WORD PWR_15P : 15;
	WORD SignBIT : 1;
} sPWR_15P;

typedef struct _sPWR_15N
{
	WORD PWR_15N : 15;
	WORD SignBIT : 1;
} sPWR_15N;

typedef struct _sPWR_5P
{
	WORD PWR_5P : 15;
	WORD SignBIT : 1;
} sPWR_5P;

typedef struct _sPWR_3_3P
{
	WORD PWR_3_3P : 15;
	WORD SignBIT : 1;
} sPWR_3_3P;

typedef struct _sPWR_1_2P
{
	WORD PWR_1_2P : 15;
	WORD SignBIT : 1;
} sPWR_1_2P;

typedef struct _sSKR_BIT1
{
	WORD Reserved3 : 1;
	WORD EOH_COOL : 1;
	WORD Reserved2 : 6;
	WORD IPB_POWER : 1;
	WORD NUC_PERIPHERAL : 1;
	WORD IPF_PERIPHERAL : 1;
	WORD IPC_PERIPHERAL : 1;
	WORD Reserved1 : 1;
	WORD SKR_BIT_DONE : 2;
	WORD SKR_BIT1_RESULT : 1;
} sSKR_BIT1;

typedef struct _sSKR_BIT2
{
	WORD IPC_BIT_0 : 1;
	WORD IPC_BIT_1 : 1;
	WORD IPC_BIT_2 : 1;
	WORD Reserved4 : 1;
	WORD IPC_BIT_4 : 1;
	WORD IPC_BIT_5 : 1;
	WORD IPC_BIT_6 : 1;
	WORD IPC_BIT_7 : 1;
	WORD IPF_BIT_0 : 1;
	WORD IPF_BIT_1 : 1;
	WORD Reserved3 : 1;
	WORD Reserved2 : 1;
	WORD NUC_BIT_0 : 1;
	WORD NUC_BIT_1 : 1;
	WORD Reserved1 : 1;
	WORD SKR_BIT2_RESULT : 1;
} sSKR_BIT2;

typedef struct _sACT_BIT
{
	WORD CAN : 1;
	WORD ADC : 1;
	WORD FLASH : 1;
	WORD DSP : 1;
	WORD p5V : 1;
	WORD m10V : 1;
	WORD p10V : 1;
	WORD m15V : 1;
	WORD p15V : 1;
	WORD p30V : 1;
	WORD Reserved : 2;
	WORD ACT_SW_VER : 3;
	WORD ACT_BIT_RESULT : 1;
} sACT_BIT;

typedef struct _sMSL_BIT_CHK
{
	WORD NO_OF_DATA;
	WORD CTRL_WORD;
	sMSL_BIT1 MSL_BIT1;
	sMSL_BIT2 MSL_BIT2;
	sGCU_BIT GCU_BIT;
	sMBAT MBAT;
	sPWR_30P PWR_30P;
	sPWR_15P PWR_15P;
	sPWR_15N PWR_15N;
	sPWR_5P PWR_5P;
	sPWR_3_3P PWR_3_3P;
	sPWR_1_2P PWR_1_2P;
	sSKR_BIT1 SKR_BIT1;
	sSKR_BIT2 SKR_BIT2;
	sACT_BIT ACT_BIT;
} sMSL_BIT_CHK;

typedef union _uMSL_BIT_CHK
{
	sMSL_BIT_CHK MSL_BIT_CHK;
	BYTE m_bMSL_BIT_CHK[30];
	WORD wMSL_BIT_CHK[15];
} uMSL_BIT_CHK;

typedef struct _sSKR_CAGE_CMD
{
	WORD SKR_CAGE_RSLT : 1;
	WORD Reserved : 15;
} sSKR_CAGE_CMD;

typedef union _uSKR_CAGE_CMD
{
	sSKR_CAGE_CMD SKR_CAGE_CMD;
	BYTE bSKR_CAGE_CMD[6];
	WORD wSKR_CAGE_CMD[3];
} uSKR_CAGE_CMD;

typedef struct _sMSL_ID_CHK
{
	WORD NO_OF_DATA;
	WORD CTRL_WORD;
	WORD MSL_ID;
} sMSL_ID_CHK;

typedef union _uMSL_ID_CHK
{
	sMSL_ID_CHK MSL_ID_CHK;
	BYTE bMSL_ID_CHK[6];
	WORD wMSL_ID_CHK[3];
} uMSL_ID_CHK;

typedef struct _sSKR_RDY
{
	WORD Reserved : 14;
	WORD SKR_RDY_RSLT : 2;
} sSKR_RDY;

typedef struct _sSKR_TEMP
{
	WORD SKR_TEMP : 15;
	WORD SignBIT : 1;
} sSKR_TEMP;

typedef struct _sSKR_RDY_CHK
{
	WORD NO_OF_DATA;
	WORD CTRL_WORD;
	sSKR_RDY SKR_RDY;
	WORD FPA_TEMP;
	sSKR_TEMP SKR_TEMP;
	WORD MAX_SKR_RDY_TIME;
} sSKR_RDY_CHK;

typedef union _uSKR_RDY_CHK
{
	sSKR_RDY_CHK SKR_RDY_CHK;
	BYTE bSKR_RDY_CHK[12];
	WORD wSKR_RDY_CHK[6];
} uSKR_RDY_CHK;

typedef struct _sPLC_BIT_RSLT
{
	WORD Reserved : 13;
	WORD PLC_BIT_RSLT : 3;
} sPLC_BIT_RSLT;

typedef struct _sSKR_PLC_CHK
{
	WORD NO_OF_DATA;
	WORD CTRL_WORD;
	sPLC_BIT_RSLT PLC_BIT_RSLT;
	WORD PLC_NUM_RSLT;
	sSKR_RDY SKR_RDY;
	WORD FPA_TEMP;
	sSKR_TEMP SKR_TEMP;
} sSKR_PLC_CHK;

typedef union _uSKR_PLC_CHK
{
	sSKR_PLC_CHK SKR_PLC_CHK;
	BYTE bSKR_PLC_CHK[14];
	WORD wSKR_PLC_CHK[7];

} uSKR_PLC_CHK;

typedef struct _sLOCK_ON_CMD
{
	WORD NO_OF_DATA;
	WORD CTRL_WORD;
	sSKR_RDY SKR_RDY;
	WORD FPA_TEMP;
	sSKR_TEMP SKR_TEMP;
} sLOCK_ON_CMD;

typedef union _uLOCK_ON_CMD
{
	sLOCK_ON_CMD LOCK_ON_CMD;
	BYTE bLOCK_ON_CMD[10];
	WORD wLOCK_ON_CMD[5];
} uLOCK_ON_CMD;

typedef struct _sLOCK_ON_RSLT
{
	WORD Reserved : 14;
	WORD LOCK_ON_RSLT : 2;
} sLOCK_ON_RSLT;

typedef struct _sYAW_RPOS_P
{
	WORD YAW_RPOS_P : 15;
	WORD SignBIT : 1;
} sYAW_RPOS_P;

typedef struct _sPITCH_RPOS_P
{
	WORD PITCH_RPOS_P : 15;
	WORD SignBIT : 1;
} sPITCH_RPOS_P;

typedef struct _sOG_SX_STS
{
	WORD OG_SX_STS : 15;
	WORD SignBIT : 1;
} sOG_SX_STS;

typedef struct _sOG_SY_STS
{
	WORD OG_SY_STS : 15;
	WORD SignBIT : 1;
} sOG_SY_STS;

typedef struct _sOG_EX_STS
{
	WORD OG_EX_STS : 15;
	WORD SignBIT : 1;
} sOG_EX_STS;

typedef struct _sOG_EY_STS
{
	WORD OG_EY_STS : 15;
	WORD SignBIT : 1;
} sOG_EY_STS;

typedef struct _sSKR_TRK_STATUS
{
	WORD NO_OF_DATA;
	WORD CTRL_WORD;
	sLOCK_ON_RSLT LOCK_ON_RSLT;
	sYAW_RPOS_P YAW_RPOS_P;
	sPITCH_RPOS_P PITCH_RPOS_P;
	sOG_SX_STS OG_SX_STS;
	sOG_SY_STS OG_SY_STS;
	sOG_EX_STS OG_EX_STS;
	sOG_EY_STS OG_EY_STS;
	sSKR_RDY SKR_RDY;
	WORD FPA_TEMP;
	sSKR_TEMP SKR_TEMP;
} sSKR_TRK_STATUS;

typedef union _uSKR_TRK_STATUS
{
	sSKR_TRK_STATUS SKR_TRK_STATUS;
	BYTE bSKR_TRK_STATUS[24];
	WORD wSKR_TRK_STATUS[12];
} uSKR_TRK_STATUS;

typedef struct _sATK_MODE_CMD
{
	WORD NO_OF_DATA;
	WORD CTRL_WORD;
	sSKR_RDY SKR_RDY_RSLT;
	WORD FPA_TEMP;
	sSKR_TEMP SKR_TEMP;
} sATK_MODE_CMD;

typedef union _uATK_MODE_CMD
{
	sATK_MODE_CMD ATK_MODE_CMD;
	BYTE bATK_MODE_CMD[10];
	WORD wATK_MODE_CMD[5];
} uATK_MODE_CMD;

typedef struct _sBATSQ
{
	WORD NO_OF_DATA;
	WORD CTRL_WORD;
	WORD BATSQ_RSLT;
} sBATSQ;

typedef union _uBATSQ
{
	sATK_MODE_CMD BATSQ;
	BYTE bBATSQ[6];
	WORD wBATSQ[3];
} uBATSQ;

typedef struct _sMBAT_ON
{
	WORD NO_OF_DATA;
	WORD CTRL_WORD;
	WORD MBAT_ON_RSLT;
} sMBAT_ON;

typedef union _uMBAT_ON
{
	sATK_MODE_CMD MBAT_ON;
	BYTE bMBAT_ON[6];
	WORD wMBAT_ON[3];
} uMBAT_ON;

typedef struct _sABAT_ON
{
	WORD NO_OF_DATA;
	WORD CTRL_WORD;
	WORD ABAT_ON_RSLT;
} sABAT_ON;

typedef union _uABAT_ON
{
	sATK_MODE_CMD ABAT_ON;
	BYTE bABAT_ON[6];
	WORD wABAT_ON[3];
} uABAT_ON;

typedef struct _sSKR_STS
{
	WORD SKR_STS_RSLT : 1;
	WORD Reserved1 : 8;
	WORD IPC_IMAGE_CHECK : 1;
	WORD IPF_CHECK_SUM : 1;
	WORD IPF_ECC : 1;
	WORD Reserved2 : 1;
	WORD NUC_CHKECK_SUM : 1;
	WORD EOH_COOL : 1;
	WORD EOH_ECC : 1;
} SKR_STS;

typedef struct _sMSL_STS_CHK
{
	WORD NO_OF_DATA;
	WORD CTRL_WORD;
	sMSL_BIT1 MSL_STS1;
	sMSL_BIT2 MSL_STS2;
	sGCU_BIT GCU_STS;
	sMBAT MBAT;
	sPWR_30P PWR_30P;
	sPWR_15P PWR_15P;
	sPWR_15N PWR_15N;
	sPWR_5P PWR_5P;
	sPWR_3_3P PWR_3_3P;
	sPWR_1_2P PWR_1_2P;
	SKR_STS SKR_STS;
	sACT_BIT ACT_STS;
} sMSL_STS_CHK;

typedef union _uMSL_STS_CHK
{
	sMSL_STS_CHK MSL_STS_CHK;
	BYTE bMSL_STS_CHK[28];
	WORD wMSL_STS_CHK[14];
} uMSL_STS_CHK;

typedef struct _sCMD_RSLT
{
	WORD NO_OF_DATA;
	WORD CTRL_WORD;
	WORD CMD_RSLT;
} sCMD_RSLT;

typedef union _uCMD_RSLT
{
	sCMD_RSLT CMD_RSLT;
	BYTE bCMD_RSLT[6];
	WORD wCMD_RSLT[3];
} uCMD_RSLT;

typedef struct _sFCU_BIT_CHK
{
	WORD NO_OF_DATA;
	WORD CTRL_WORD;
	WORD FCU_BIT_RSLT;
	WORD PINCHK;
	WORD MSLCON;
	WORD EXT_POW_VOL;
	WORD EXT_POW_CUR;
	WORD ABAT_POW_VOL;
	WORD ABAT_POW_CUR;
	WORD MBAT_POW_VOL;
	WORD MBAT_POW_CUR;
} sFCU_BIT_CHK;

typedef union _uFCU_BIT_CHK
{
	sFCU_BIT_CHK FCU_BIT_CHK;
	BYTE bFCU_BIT_CHK[22];
	WORD wFCU_BIT_CHK[11];
} uFCU_BIT_CHK;

typedef struct _sEXT_POW_CHK
{
	WORD NO_OF_DATA;
	WORD CTRL_WORD;
	WORD EXT_POW_VOL;
	WORD EXT_POW_CUR;
} sEXT_POW_CHK;

typedef union _uEXT_POW_CHK
{
	sEXT_POW_CHK EXT_POW_CHK;
	BYTE bEXT_POW_CHK[8];
	WORD wEXT_POW_CHK[4];
} uEXT_POW_CHK;

typedef struct _sABAT_POW_CHK
{
	WORD NO_OF_DATA;
	WORD CTRL_WORD;
	WORD ABAT_POW_VOL;
	WORD ABAT_POW_CUR;
} sABAT_POW_CHK;

typedef union _uABAT_POW_CHK
{
	sABAT_POW_CHK ABAT_POW_CHK;
	BYTE bABAT_POW_CHK[8];
	WORD wABAT_POW_CHK[4];
} uABAT_POW_CHK;

typedef struct _sMBAT_POW_CHK
{
	WORD NO_OF_DATA;
	WORD CTRL_WORD;
	WORD MBAT_POW_VOL;
	WORD MBAT_POW_CUR;
} sMBAT_POW_CHK;

typedef union _uMBAT_POW_CHK
{
	sMBAT_POW_CHK MBAT_POW_CHK;
	BYTE bMBAT_POW_CHK[8];
	WORD wMBAT_POW_CHK[4];
} uMBAT_POW_CHK;

typedef struct _sMSLCON_CHK
{
	WORD NO_OF_DATA;
	WORD CTRL_WORD;
	WORD MSLCON_CHK_RSLT;
} sMSLCON_CHK;

typedef union _uMSLCON_CHK
{
	sMSLCON_CHK MSLCON_CHK;
	BYTE bMSLCON_CHK[6];
	WORD wMSLCON_CHK[3];
} uMSLCON_CHK;

typedef struct _sPINCHK_CHK
{
	WORD NO_OF_DATA;
	WORD CTRL_WORD;
	WORD PINCHK_CHK_RSLT;
} sPINCHK_CHK;

typedef union _uPINCHK_CHK
{
	sPINCHK_CHK PINCHK_CHK;
	BYTE bPINCHK_CHK[6];
	WORD wPINCHK_CHK[3];
} uPINCHK_CHK;

typedef struct _sDISC_TEST_MODE_SET
{
	WORD NO_OF_DATA;
	WORD CTRL_WORD;
	WORD DISC_TEST_MODE_SET_RSLT;
} sDISC_TEST_MODE_SET;

typedef union _uDISC_TEST_MODE_SET
{
	sDISC_TEST_MODE_SET DISC_TEST_MODE_SET;
	BYTE bDISC_TEST_MODE_SET[6];
	WORD wDISC_TEST_MODE_SET[3];
} uDISC_TEST_MODE_SET;

typedef struct _sPINCHK_MSLCON
{
	WORD NO_OF_DATA;
	WORD CTRL_WORD;
	WORD PINCHK;
	WORD MSLCON;
} sPINCHK_MSLCON;

typedef union _uPINCHK_MSLCON
{
	sPINCHK_MSLCON DISC_TEST_MODE_SET;
	BYTE bPINCHK_MSLCON[8];
	WORD wPINCHK_MSLCON[4];
} uPINCHK_MSLCON;


const WORD ZERO_DATA = 0x0000;

/* Ήί»ηΐύΒχ_°‘Ώͺ */
const WORD LEN_EXT_POW_ON = 0x0002;
const WORD HEADER_EXT_POW_ON = 0x7000;

const WORD LEN_MSL_BIT_CHK = 0x0001;
const WORD HEADER_MSL_BIT_CHK = 0x0100;

const WORD LEN_SKR_CAGE_CMD = 0x0001;
const WORD HEADER_SKR_CAGE_CMD = 0x0200;

const WORD LEN_MSL_ID_CHK = 0x0001;
const WORD HEADER_MSL_ID_CHK = 0x0300;

const WORD LEN_SKR_RDY_CHK = 0x0001;
const WORD HEADER_SKR_RDY_CHK = 0x0400;

const WORD LEN_SKR_PLC_CHK = 0x0006;
const WORD HEADER_SKR_PLC_CHK = 0x1400;

const WORD LEN_LOCK_ON_CMD = 0x0007;
const WORD HEADER_LOCK_ON_CMD = 0x0500;

const WORD LEN_RE_LOCK_ON_CMD = 0x0007;
const WORD HEADER_RE_LOCK_ON_CMD = 0x1500;

const WORD LEN_SKR_TRK_STATUS = 0x0001;
const WORD HEADER_SKR_TRK_STATUS = 0x0600;


/* Ήί»ηΐύΒχ_Ίρ°‘Ώͺ */
const WORD LEN_ATK_MODE_CMD = 0x0002;
const WORD HEADER_ATK_MODE_CMD = 0x3700;

const WORD LEN_BATSQ = 0x0001;
const WORD LEN_MABAT_ABAT = 0x0002;
const WORD HEADER_BATSQ = 0x4000;
const WORD HEADER_MBAT_ON = 0x4100;
const WORD HEADER_ABAT_ON = 0x4200;

const WORD LEN_MSL_STS_CHK = 0x0001;
const WORD HEADER_MSL_STS_CHK = 0x3800;

const WORD LEN_LIFTOFF_RDY_CMD = 0x0001;
const WORD HEADER_LIFTOFF_RDY_CMD = 0x3F00;

const WORD LEN_PINSQ = 0x0001;
const WORD HEADER_PINSQ = 0x4300;

const WORD LEN_EMSQ = 0x0001;
const WORD HEADER_EMSQ = 0x4400;

const WORD LEN_CUSQ = 0x0001;
const WORD HEADER_CUSQ = 0x4500;


/* »σΕΒ Α€ΊΈ */
const WORD LEN_FCU_BIT_CHK = 0x000B;
const WORD HEADER_FCU_BIT_CHK = 0x6200;

const WORD LEN_EXT_POW_CHK = 0x0003;
const WORD HEADER_EXT_POW_CHK = 0x5010;

const WORD LEN_ABAT_POW_CHK = 0x0003;
const WORD HEADER_ABAT_POW_CHK = 0x5020;

const WORD LEN_MBAT_POW_CHK = 0x0003;
const WORD HEADER_MBAT_POW_CHK = 0x5030;

const WORD LEN_DISC_TEST_MODE_SET = 0x0002;
const WORD HEADER_DISC_TEST_MODE_SET = 0x6100;

const WORD LEN_SKR_IMG_CTRL = 0x0002;
const WORD HEADER_SKR_IMG_CTRL = 0x7100;

const WORD HEADER_OFF_EXT30P = 0x7001;

const WORD HEADER_OFF_MBAT = 0x7002;
const WORD HEADER_OFF_ABAT = 0x7003;

const WORD HEADER_IMG_VAL = 0x7010;

const WORD HEADER_CONNECT_HILS = 0x2000;
const WORD HEADER_DISCONNECT_HILS = 0x2010;

const WORD HEADER_EXIT = 0x00FF;